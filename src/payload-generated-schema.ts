/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const partner = sqliteTable(
  'partner',
  {
    id: integer('id').primaryKey(),
    logo: integer('logo_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    name: text('name').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    partner_logo_idx: index('partner_logo_idx').on(columns.logo),
    partner_updated_at_idx: index('partner_updated_at_idx').on(columns.updatedAt),
    partner_created_at_idx: index('partner_created_at_idx').on(columns.createdAt),
  }),
)

export const facility = sqliteTable(
  'facility',
  {
    id: integer('id').primaryKey(),
    logo: integer('logo_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    name: text('name').notNull(),
    enName: text('en_name').notNull(),
    description: text('description').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    facility_logo_idx: index('facility_logo_idx').on(columns.logo),
    facility_updated_at_idx: index('facility_updated_at_idx').on(columns.updatedAt),
    facility_created_at_idx: index('facility_created_at_idx').on(columns.createdAt),
  }),
)

export const news_tags = sqliteTable(
  'news_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    tag: text('tag'),
  },
  (columns) => ({
    _orderIdx: index('news_tags_order_idx').on(columns._order),
    _parentIDIdx: index('news_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [news.id],
      name: 'news_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const news = sqliteTable(
  'news',
  {
    id: integer('id').primaryKey(),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    global: integer('global', { mode: 'boolean' }).default(false),
    featured: integer('featured', { mode: 'boolean' }).default(false),
    tipe: text('tipe', {
      enum: ['news', 'pengumuman', 'news_hmj', 'news_akademik', 'news_prestasi'],
    }).default('news'),
    name: text('name'),
    content: text('content', { mode: 'json' }),
    slug: text('slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => ({
    news_thumbnail_idx: index('news_thumbnail_idx').on(columns.thumbnail),
    news_updated_at_idx: index('news_updated_at_idx').on(columns.updatedAt),
    news_created_at_idx: index('news_created_at_idx').on(columns.createdAt),
    news__status_idx: index('news__status_idx').on(columns._status),
  }),
)

export const _news_v_version_tags = sqliteTable(
  '_news_v_version_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    tag: text('tag'),
    _uuid: text('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_news_v_version_tags_order_idx').on(columns._order),
    _parentIDIdx: index('_news_v_version_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_news_v.id],
      name: '_news_v_version_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _news_v = sqliteTable(
  '_news_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => news.id, {
      onDelete: 'set null',
    }),
    version_thumbnail: integer('version_thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_global: integer('version_global', { mode: 'boolean' }).default(false),
    version_featured: integer('version_featured', { mode: 'boolean' }).default(false),
    version_tipe: text('version_tipe', {
      enum: ['news', 'pengumuman', 'news_hmj', 'news_akademik', 'news_prestasi'],
    }).default('news'),
    version_name: text('version_name'),
    version_content: text('version_content', { mode: 'json' }),
    version_slug: text('version_slug'),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
  },
  (columns) => ({
    _news_v_parent_idx: index('_news_v_parent_idx').on(columns.parent),
    _news_v_version_version_thumbnail_idx: index('_news_v_version_version_thumbnail_idx').on(
      columns.version_thumbnail,
    ),
    _news_v_version_version_updated_at_idx: index('_news_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _news_v_version_version_created_at_idx: index('_news_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _news_v_version_version__status_idx: index('_news_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _news_v_created_at_idx: index('_news_v_created_at_idx').on(columns.createdAt),
    _news_v_updated_at_idx: index('_news_v_updated_at_idx').on(columns.updatedAt),
    _news_v_latest_idx: index('_news_v_latest_idx').on(columns.latest),
  }),
)

export const agenda = sqliteTable(
  'agenda',
  {
    id: integer('id').primaryKey(),
    name: text('name').notNull(),
    enName: text('en_name').notNull(),
    description: text('description').notNull(),
    startDate: text('start_date')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    endDate: text('end_date')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    location: text('location'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    agenda_updated_at_idx: index('agenda_updated_at_idx').on(columns.updatedAt),
    agenda_created_at_idx: index('agenda_created_at_idx').on(columns.createdAt),
  }),
)

export const profile = sqliteTable(
  'profile',
  {
    id: integer('id').primaryKey(),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    global: integer('global', { mode: 'boolean' }).default(false),
    name: text('name'),
    description: text('description'),
    content: text('content', { mode: 'json' }),
    slug: text('slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => ({
    profile_thumbnail_idx: index('profile_thumbnail_idx').on(columns.thumbnail),
    profile_updated_at_idx: index('profile_updated_at_idx').on(columns.updatedAt),
    profile_created_at_idx: index('profile_created_at_idx').on(columns.createdAt),
    profile__status_idx: index('profile__status_idx').on(columns._status),
  }),
)

export const _profile_v = sqliteTable(
  '_profile_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => profile.id, {
      onDelete: 'set null',
    }),
    version_thumbnail: integer('version_thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_global: integer('version_global', { mode: 'boolean' }).default(false),
    version_name: text('version_name'),
    version_description: text('version_description'),
    version_content: text('version_content', { mode: 'json' }),
    version_slug: text('version_slug'),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
  },
  (columns) => ({
    _profile_v_parent_idx: index('_profile_v_parent_idx').on(columns.parent),
    _profile_v_version_version_thumbnail_idx: index('_profile_v_version_version_thumbnail_idx').on(
      columns.version_thumbnail,
    ),
    _profile_v_version_version_updated_at_idx: index(
      '_profile_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _profile_v_version_version_created_at_idx: index(
      '_profile_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _profile_v_version_version__status_idx: index('_profile_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _profile_v_created_at_idx: index('_profile_v_created_at_idx').on(columns.createdAt),
    _profile_v_updated_at_idx: index('_profile_v_updated_at_idx').on(columns.updatedAt),
    _profile_v_latest_idx: index('_profile_v_latest_idx').on(columns.latest),
  }),
)

export const studyprogram = sqliteTable(
  'studyprogram',
  {
    id: integer('id').primaryKey(),
    thumbnail: integer('thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    global: integer('global', { mode: 'boolean' }).default(false),
    name: text('name'),
    description: text('description'),
    content: text('content', { mode: 'json' }),
    slug: text('slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => ({
    studyprogram_thumbnail_idx: index('studyprogram_thumbnail_idx').on(columns.thumbnail),
    studyprogram_updated_at_idx: index('studyprogram_updated_at_idx').on(columns.updatedAt),
    studyprogram_created_at_idx: index('studyprogram_created_at_idx').on(columns.createdAt),
    studyprogram__status_idx: index('studyprogram__status_idx').on(columns._status),
  }),
)

export const _studyprogram_v = sqliteTable(
  '_studyprogram_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => studyprogram.id, {
      onDelete: 'set null',
    }),
    version_thumbnail: integer('version_thumbnail_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_global: integer('version_global', { mode: 'boolean' }).default(false),
    version_name: text('version_name'),
    version_description: text('version_description'),
    version_content: text('version_content', { mode: 'json' }),
    version_slug: text('version_slug'),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
  },
  (columns) => ({
    _studyprogram_v_parent_idx: index('_studyprogram_v_parent_idx').on(columns.parent),
    _studyprogram_v_version_version_thumbnail_idx: index(
      '_studyprogram_v_version_version_thumbnail_idx',
    ).on(columns.version_thumbnail),
    _studyprogram_v_version_version_updated_at_idx: index(
      '_studyprogram_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _studyprogram_v_version_version_created_at_idx: index(
      '_studyprogram_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _studyprogram_v_version_version__status_idx: index(
      '_studyprogram_v_version_version__status_idx',
    ).on(columns.version__status),
    _studyprogram_v_created_at_idx: index('_studyprogram_v_created_at_idx').on(columns.createdAt),
    _studyprogram_v_updated_at_idx: index('_studyprogram_v_updated_at_idx').on(columns.updatedAt),
    _studyprogram_v_latest_idx: index('_studyprogram_v_latest_idx').on(columns.latest),
  }),
)

export const dosentendik = sqliteTable(
  'dosentendik',
  {
    id: integer('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    tipe: text('tipe', { enum: ['dosen', 'tendik'] })
      .notNull()
      .default('dosen'),
    pejabat: integer('pejabat', { mode: 'boolean' }),
    homebase: text('homebase', { enum: ['d4', 'd3'] })
      .notNull()
      .default('d4'),
    name: text('name').notNull(),
    nip: text('nip').notNull(),
    nidn: text('nidn'),
    nuptk: text('nuptk'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    dosentendik_image_idx: index('dosentendik_image_idx').on(columns.image),
    dosentendik_updated_at_idx: index('dosentendik_updated_at_idx').on(columns.updatedAt),
    dosentendik_created_at_idx: index('dosentendik_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    partnerID: integer('partner_id'),
    facilityID: integer('facility_id'),
    newsID: integer('news_id'),
    agendaID: integer('agenda_id'),
    profileID: integer('profile_id'),
    studyprogramID: integer('studyprogram_id'),
    dosentendikID: integer('dosentendik_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_partner_id_idx: index(
      'payload_locked_documents_rels_partner_id_idx',
    ).on(columns.partnerID),
    payload_locked_documents_rels_facility_id_idx: index(
      'payload_locked_documents_rels_facility_id_idx',
    ).on(columns.facilityID),
    payload_locked_documents_rels_news_id_idx: index(
      'payload_locked_documents_rels_news_id_idx',
    ).on(columns.newsID),
    payload_locked_documents_rels_agenda_id_idx: index(
      'payload_locked_documents_rels_agenda_id_idx',
    ).on(columns.agendaID),
    payload_locked_documents_rels_profile_id_idx: index(
      'payload_locked_documents_rels_profile_id_idx',
    ).on(columns.profileID),
    payload_locked_documents_rels_studyprogram_id_idx: index(
      'payload_locked_documents_rels_studyprogram_id_idx',
    ).on(columns.studyprogramID),
    payload_locked_documents_rels_dosentendik_id_idx: index(
      'payload_locked_documents_rels_dosentendik_id_idx',
    ).on(columns.dosentendikID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    partnerIdFk: foreignKey({
      columns: [columns['partnerID']],
      foreignColumns: [partner.id],
      name: 'payload_locked_documents_rels_partner_fk',
    }).onDelete('cascade'),
    facilityIdFk: foreignKey({
      columns: [columns['facilityID']],
      foreignColumns: [facility.id],
      name: 'payload_locked_documents_rels_facility_fk',
    }).onDelete('cascade'),
    newsIdFk: foreignKey({
      columns: [columns['newsID']],
      foreignColumns: [news.id],
      name: 'payload_locked_documents_rels_news_fk',
    }).onDelete('cascade'),
    agendaIdFk: foreignKey({
      columns: [columns['agendaID']],
      foreignColumns: [agenda.id],
      name: 'payload_locked_documents_rels_agenda_fk',
    }).onDelete('cascade'),
    profileIdFk: foreignKey({
      columns: [columns['profileID']],
      foreignColumns: [profile.id],
      name: 'payload_locked_documents_rels_profile_fk',
    }).onDelete('cascade'),
    studyprogramIdFk: foreignKey({
      columns: [columns['studyprogramID']],
      foreignColumns: [studyprogram.id],
      name: 'payload_locked_documents_rels_studyprogram_fk',
    }).onDelete('cascade'),
    dosentendikIdFk: foreignKey({
      columns: [columns['dosentendikID']],
      foreignColumns: [dosentendik.id],
      name: 'payload_locked_documents_rels_dosentendik_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_partner = relations(partner, ({ one }) => ({
  logo: one(media, {
    fields: [partner.logo],
    references: [media.id],
    relationName: 'logo',
  }),
}))
export const relations_facility = relations(facility, ({ one }) => ({
  logo: one(media, {
    fields: [facility.logo],
    references: [media.id],
    relationName: 'logo',
  }),
}))
export const relations_news_tags = relations(news_tags, ({ one }) => ({
  _parentID: one(news, {
    fields: [news_tags._parentID],
    references: [news.id],
    relationName: 'tags',
  }),
}))
export const relations_news = relations(news, ({ one, many }) => ({
  thumbnail: one(media, {
    fields: [news.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
  tags: many(news_tags, {
    relationName: 'tags',
  }),
}))
export const relations__news_v_version_tags = relations(_news_v_version_tags, ({ one }) => ({
  _parentID: one(_news_v, {
    fields: [_news_v_version_tags._parentID],
    references: [_news_v.id],
    relationName: 'version_tags',
  }),
}))
export const relations__news_v = relations(_news_v, ({ one, many }) => ({
  parent: one(news, {
    fields: [_news_v.parent],
    references: [news.id],
    relationName: 'parent',
  }),
  version_thumbnail: one(media, {
    fields: [_news_v.version_thumbnail],
    references: [media.id],
    relationName: 'version_thumbnail',
  }),
  version_tags: many(_news_v_version_tags, {
    relationName: 'version_tags',
  }),
}))
export const relations_agenda = relations(agenda, () => ({}))
export const relations_profile = relations(profile, ({ one }) => ({
  thumbnail: one(media, {
    fields: [profile.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
}))
export const relations__profile_v = relations(_profile_v, ({ one }) => ({
  parent: one(profile, {
    fields: [_profile_v.parent],
    references: [profile.id],
    relationName: 'parent',
  }),
  version_thumbnail: one(media, {
    fields: [_profile_v.version_thumbnail],
    references: [media.id],
    relationName: 'version_thumbnail',
  }),
}))
export const relations_studyprogram = relations(studyprogram, ({ one }) => ({
  thumbnail: one(media, {
    fields: [studyprogram.thumbnail],
    references: [media.id],
    relationName: 'thumbnail',
  }),
}))
export const relations__studyprogram_v = relations(_studyprogram_v, ({ one }) => ({
  parent: one(studyprogram, {
    fields: [_studyprogram_v.parent],
    references: [studyprogram.id],
    relationName: 'parent',
  }),
  version_thumbnail: one(media, {
    fields: [_studyprogram_v.version_thumbnail],
    references: [media.id],
    relationName: 'version_thumbnail',
  }),
}))
export const relations_dosentendik = relations(dosentendik, ({ one }) => ({
  image: one(media, {
    fields: [dosentendik.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    partnerID: one(partner, {
      fields: [payload_locked_documents_rels.partnerID],
      references: [partner.id],
      relationName: 'partner',
    }),
    facilityID: one(facility, {
      fields: [payload_locked_documents_rels.facilityID],
      references: [facility.id],
      relationName: 'facility',
    }),
    newsID: one(news, {
      fields: [payload_locked_documents_rels.newsID],
      references: [news.id],
      relationName: 'news',
    }),
    agendaID: one(agenda, {
      fields: [payload_locked_documents_rels.agendaID],
      references: [agenda.id],
      relationName: 'agenda',
    }),
    profileID: one(profile, {
      fields: [payload_locked_documents_rels.profileID],
      references: [profile.id],
      relationName: 'profile',
    }),
    studyprogramID: one(studyprogram, {
      fields: [payload_locked_documents_rels.studyprogramID],
      references: [studyprogram.id],
      relationName: 'studyprogram',
    }),
    dosentendikID: one(dosentendik, {
      fields: [payload_locked_documents_rels.dosentendikID],
      references: [dosentendik.id],
      relationName: 'dosentendik',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users: typeof users
  media: typeof media
  partner: typeof partner
  facility: typeof facility
  news_tags: typeof news_tags
  news: typeof news
  _news_v_version_tags: typeof _news_v_version_tags
  _news_v: typeof _news_v
  agenda: typeof agenda
  profile: typeof profile
  _profile_v: typeof _profile_v
  studyprogram: typeof studyprogram
  _studyprogram_v: typeof _studyprogram_v
  dosentendik: typeof dosentendik
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_partner: typeof relations_partner
  relations_facility: typeof relations_facility
  relations_news_tags: typeof relations_news_tags
  relations_news: typeof relations_news
  relations__news_v_version_tags: typeof relations__news_v_version_tags
  relations__news_v: typeof relations__news_v
  relations_agenda: typeof relations_agenda
  relations_profile: typeof relations_profile
  relations__profile_v: typeof relations__profile_v
  relations_studyprogram: typeof relations_studyprogram
  relations__studyprogram_v: typeof relations__studyprogram_v
  relations_dosentendik: typeof relations_dosentendik
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
